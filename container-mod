#!/bin/bash

# container-mod v0.1.5
#
# Copyright (c) 2024 Tufts University
# Author: Yucheng Zhang
#
# Citation:
# Zhang, Yucheng. "Simplifying Container-Based Module Generation on HPC with container-mod."
# Practice and Experience in Advanced Research Computing 2025: The Power of Collaboration. 2025. 1-4.
#
# This script is a modified version of the original from Purdue University's Biocontainers project.
#
# This script streamlines the process of pulling container images and
# automates the generation of Lmod modulefiles and executable wrapper scripts.
# It assumes that Singularity or Apptainer is installed and available.

# --- Script Configuration ---
VERSION="0.1.5"
PROGNAME="$(basename "$0")"
E_OK=0

###############################################################################
#  PREREQUISITE CHECK
#  Ensures that a container runtime (Singularity or Apptainer) is available.
###############################################################################

if ! command -v singularity &>/dev/null && ! module load singularity &>/dev/null && ! module load apptainer &>/dev/null;
then
    echo "Error: Failed to find or load a container runtime (Singularity/Apptainer)." >&2
    exit 1
fi

###############################################################################
#  HELPER FUNCTIONS
###############################################################################

# --- Caches for app name and version to avoid repeated user prompting ---
declare -A APP_CACHE
declare -A VER_CACHE

# --- Basic Script Utilities ---

# Performs any necessary cleanup before the script exits.
clean_up() {
	return
}

# Exits the script with a specified status code after running cleanup.
# @param $1 - The exit status code (defaults to 0).
graceful_exit() {
	clean_up
	exit ${1:-$E_OK}
}

# Sends a formatted warning message to stderr.
# @param -p - An optional flag to prefix the message with the script's name.
# @param $@ - The message string(s) to display.
warn() {
    local msg
    local withname=0
    local opt OPTIND

    while getopts :p opt;
    do
        case $opt in
            p) withname=1 ;;
        esac
    done
    shift $((OPTIND - 1))

    for msg in "$@";
    do
        if [[ $withname -ne 0 ]];
        then
            msg="$PROGNAME: $msg"
        fi
        echo -e "$msg" 1>&2
    done
}

# Escapes a string for safe use in the replacement part of a sed command.
# This handles special characters like '\', '&', and the '|' delimiter.
# @param $1 - The input string to escape.
# @echo The escaped string.
sedi_escape() {
    echo -n "$1" | sed -e 's/\\/\\\\/g' -e 's/|/\\|/g' -e 's/&/\\&/g'
}

# --- Application and Version Caching Logic ---

# Prompts the user to enter details for a local container file.
# @param $1 - The local file path (URI).
# @return 0 on success, 1 on failure.
_prompt_for_local_details() {
    local uri="$1"
    if [[ -v "APP_CACHE[$uri]" ]]; then
        return 0
    fi

    echo "Local image file detected: $uri" >&2

    local app version
    read -r -p "-> Enter the application name: " app
    if [[ -z "$app" ]];
    then
        warn -p "Error: Application name cannot be empty."
        return 1
    fi

    read -r -p "-> Enter the application version: " version
    if [[ -z "$version" ]];
    then
        warn -p "Error: Version cannot be empty."
        return 1
    fi

    APP_CACHE["$uri"]="$app"
    VER_CACHE["$uri"]="$version"
    return 0
}

# Ensures that application details (name, version) for a URI are cached.
# It parses remote URIs or prompts the user for local file details.
# @param $1 - The container URI (remote or local).
# @return 0 on success, 1 on failure.
_ensure_uri_details_cached() {
    local uri="$1"
    if [[ -v "APP_CACHE[$uri]" ]]; then
        return 0
    fi

    # Handle local files by prompting the user
    if [[ -f "$uri" ]]; then
        _prompt_for_local_details "$uri" || return 1
        return 0
    fi

    # Handle remote URIs by parsing them
    local app ver
	if [[ "$uri" == */qiime2/core:* ]];
	then
		app="qiime2"
	elif [[ "$uri" == */nvidia/clara/clara-parabricks:* ]];
	then
		app="parabricks"
    elif [[ "$uri" == */nvidia/devtools/nsight-systems-cli:* ]];
    then
        app="nsightsys"
	else
		app="${uri##*/}" # Get the last component of the path
		app=${app%%:*}   # Remove the version tag
	fi

	ver="${uri##*/}" # Get the last component
	ver=${ver##*:}   # Get the part after the colon
	ver=$(echo "$ver" | sed -re 's/(--.*)?(_[0-9]+)?$//') # Strip version suffixes

    # Populate the cache
    APP_CACHE["$uri"]="$app"
    VER_CACHE["$uri"]="$ver"
    return 0
}


# --- User Interface and File/Directory Management ---

# Displays the main help message for the script.
help_message() {
    scriptname="container-mod"
    cat <<-EOF

${scriptname} v$VERSION - Container Module Generator

This script streamlines pulling container images and generating corresponding
modulefiles and wrapper scripts.

Usage:
    ${scriptname} <subcommand> [options] <URIs>

Subcommands:
    pull        Pull the container image from the specified URIs.
    module      Generate module files for the specified URIs.
    exec        Generate wrapper scripts for the programs inside the container.
    pipe        Run pull, module, and exec steps sequentially for the given URIs.

Options:
  -d, --dir DIR           Specify the base output directory.
  -f, --force             Force overwrite of existing files.
  -m, --moduledir DIR     Specify the directory for storing generated module files.
  -u, --update            Update the app info file with the new version.
  -p, --personal          Create files in your personal directories (~/privatemodules, etc.).
  --profile               Use a specific configuration profile.
  -j, --jupyter           Generate a Jupyter kernel for the container.
  -h, --help              Display this help message and exit.

Examples:
    ${scriptname} pull docker://quay.io/biocontainers/vcftools:0.1.16
    ${scriptname} pipe -p docker://quay.io/biocontainers/vcftools:0.1.16

EOF
}

# Lists available configuration profiles.
list_profiles() {
    if [ -d "${PROFILEHOMEDIR}" ];
    then
        for PROFILE in "${PROFILEHOMEDIR}"/*;
        do
            PROFILENAME="$(basename "${PROFILE}")"
            if [ "${PROFILENAME}" != "*" ];
            then
                echo "${PROFILENAME}  (Personal Profile)"
            fi
        done
    fi
    if [ -d "${PROFILEROOT}" ];
    then
        for PROFILE in "${PROFILEROOT}"/*;
        do
            PROFILENAME="$(basename "${PROFILE}")"
            if [ "${PROFILENAME}" != "*" ];
            then
                if [ -e "${PROFILEHOMEDIR}/${PROFILENAME}" ];
                then
                    echo "${PROFILENAME}  (Overridden)"
                else
                    echo "${PROFILENAME}"
                fi
            fi
        done
    fi
    exit 0
}

# Displays a message inside a formatted text box.
# @param $@ - The lines of text to display.
boxify_text() {
	local msg=("$@")
	local line longest width=0
	for line in "${msg[@]}"; do
		if [[ ${#line} -gt $width ]];
		then
			longest="$line"
			width="${#line}"
		fi
	done
	echo "+-${longest//?/-}-+"
	for line in "${msg[@]}"; do
		printf '| %s%*s%s |\n' "$(tput bold)" "-$width" "$line" "$(tput sgr0)"
	done
	echo "+-${longest//?/-}-+"
}

# Creates a directory if it doesn't exist and sets its permissions to 755.
# @param $1 - The path to the directory to create.
# @param $2 - A message to display upon creation.
create_dir() {
    local dir_path="$1"
    local message="$2"
    if [[ ! -d "$dir_path" ]]; then
        mkdir -p -m 755 "$dir_path"
        echo "$message: $dir_path"
    fi
}

# Executes a given subcommand for a list of URIs.
# @param $1 - The name of the function to call (e.g., "pull", "module").
# @param $@ - The list of URIs to process.
handle_subcommand() {
    local cmd="$1"
    shift
    for URI in "$@";
    do
        local bold_uri; bold_uri="\e[1m${URI}\e[0m"
        local bold_cmd; bold_cmd="\e[1m${cmd}\e[0m"
        echo -e "-> Processing URI ${bold_uri} with subcommand ${bold_cmd}"
        if ! "$cmd" "$URI"; then
            warn -p "Error executing command '$cmd' for URI: $URI"
            exit 1
        fi
    done
    return 0
}

# Copies the central 'repos' directory to the user's personal space if needed.
ensure_appinfo_dir() {
    if [[ "$personal" -eq 1 && ! -d "$HOME/container-apps/repos" ]]; then
        mkdir -p "$HOME/container-apps" || {
            warn -p "Error: Failed to create directory $HOME/container-apps"
            return 1
        }
        if [[ -d "$AppInfo_DIR" ]];
        then
            cp -r "$AppInfo_DIR" "$HOME/container-apps/" || {
                warn -p "Error: Failed to copy $AppInfo_DIR to $HOME/container-apps/"
                return 1
            }
        else
            warn -p "Error: Source directory $AppInfo_DIR does not exist"
            return 1
        fi
    fi
}

# Ensures an application info file exists, creating it if necessary.
# @param $1 - The container URI.
ensure_appinfo_file() {
    local URI="$1"
    if [[ -z "$URI" ]];
    then
        warn -p "Error: URI parameter is missing."
        return 1
    fi
    local app
    app=$(uri2app "$URI") || {
        warn -p "Error: Failed to extract app name from URI: $URI"
        return 1
    }
    local target_path
    if [[ ! -f "$HOME/container-apps/repos/$app" && ! -f "$AppInfo_DIR/$app" ]]; then
    	if [[ "$personal" -eq 1 ]];
    	then
        	target_path="$HOME/container-apps/repos/$app"
    	else
        	target_path="$AppInfo_DIR/$app"
    	fi
    	create_appinfo_file "$app" "$target_path" || {
        	warn -p "Error: Failed to create appinfo file for $app at $target_path"
        	return 1
    	}
    else
    	echo "   App info file already exists for '$app', skipping creation."
    fi
}


###############################################################################
#  URI TO NAME/VERSION/MODULE CONVERTERS
###############################################################################

# Converts a URI to a Singularity image filename.
# @param $1 - The container URI or local file path.
# @echo The resulting image filename (e.g., quay.io_biocontainers_vcftools:0.1.16.sif).
uri2imgname() {
	local uri="$1"
    if [[ -f "$uri" ]];
    then
        basename "$uri"
        return 0
    fi
	local file=""
	file="${uri#*://}"         # Drop protocol prefix
	file="${file//\//_}.sif"   # Replace slashes with underscores and add .sif
	echo "$file"
}

# Converts a URI to a modulefile path (app/version.lua).
# @param $1 - The container URI.
# @echo The resulting modulefile path.
uri2modname() {
	local uri="$1"
	local app
    app=$(uri2app "$uri") || return 1
	local modver
    modver=$(uri2ver "$uri") || return 1
	echo "$app/$modver.lua"
}

# Retrieves the cached application name for a URI.
# @param $1 - The container URI.
# @echo The application name.
uri2app() {
    echo "${APP_CACHE[$1]}"
}

# Retrieves the cached version for a URI.
# @param $1 - The container URI.
# @echo The version string.
uri2ver() {
    echo "${VER_CACHE[$1]}"
}

###############################################################################
#  CORE LOGIC: PULL, MODULE, EXEC
###############################################################################

# Pulls a container image from a remote URI.
# @param $1 - The remote container URI.
pull() {
    local uri=$1
    local is_local_file=0
    # If the URI is a local file, do nothing.
    if [[ -f "$uri" ]];
    then
        is_local_file=1
    elif [[ "$uri" != *"://"* ]];
    then
        warn -p "Error: The specified local file does not exist: $uri"
        return 1
    fi

    if [[ $is_local_file -eq 1 ]];
    then
        echo "   Local image file detected. Leaving it in its original location: $uri"
        return 0
    fi

    local imgname; imgname=$(uri2imgname "$uri") || return 1
    local image_outdir
    if [[ $personal -eq 1 ]];
    then
        image_outdir="$PRIVATE_IMAGEDIR"
    else
        image_outdir="$PUBLIC_IMAGEDIR"
    fi

    local target_image_path="${image_outdir}/${imgname}"

    if [[ -e "$target_image_path" && $force -eq 0 ]];
    then
        echo "   Image already exists: ${target_image_path}. Skipping."
        return 0
    fi

    # Pull the image and set its permissions to 644 (read-only for others).
    echo -e "   \e[1mPulling Singularity image...\e[0m"
    singularity pull --force "$target_image_path" "$uri" || exit 1
    chmod 644 "$target_image_path"
    echo "   Pull complete."
    echo "   Container image is saved to: $target_image_path"

    # --- RE-ADDED REPOSITORY UPDATE LOGIC ---
    if [[ $update_repo -eq 1 ]];
    then
        local app; app=$(uri2app "$uri") || return 1
        local version; version=$(uri2ver "$uri") || return 1
        local app_file="$AppInfo_DIR/$app"
        if [[ $personal -eq 1 ]];
        then
             app_file="$HOME/container-apps/repos/$app"
        fi
        if [[ ! -f "$app_file" ]]; then
            warn -p "Error: App file '$app_file' not found. Please create it first."
            # We don't want to leave a dangling image if the update fails
            rm -f "$target_image_path"
            return 1
        fi

        local repo_uri="$uri"
        # Create a temporary file to build the updated content
        local temp_file
        temp_file=$(mktemp "${app_file}.XXXXXX") || { warn -p "Failed to create temp file"; return 1; }
        # Ensure temp file is removed on exit
        trap 'rm -f "$temp_file"' RETURN

        # Rebuild the file:
        # 1. Copy all lines EXCEPT the existing version lines.
        # 2. Add the NEW version line at the top.
        # 3. Append all the OLD version lines back.
        {
            grep -v '^version(' "$app_file"
            echo "version(\"$version\", uri=\"$repo_uri\")"
            grep '^version(' "$app_file"
        } > "$temp_file"

        # Atomically replace the old file with the new one
        if mv "$temp_file" "$app_file"; then
            echo "   Updated app info file: $app_file with new version $version"
        else
            warn -p "Error: Failed to update app info file '$app_file'."
            rm -f "$target_image_path"
            return 1
        fi
    fi
}

# Generates an Lmod modulefile for a container.
# @param $1 - The container URI.
module() {
    local URI="$1"
    local module_outdir
    if [[ $personal -eq 1 ]];
    then
        module_outdir="$PRIVATE_MODULEDIR"
    else
        module_outdir="$MOD_OUTDIR"
    fi

    local modname; modname=$(uri2modname "$URI") || return 1
    local OUTFILE="${module_outdir}/${modname}"

    if [[ -f "$OUTFILE" && $force -eq 0 ]];
    then
        echo "   Modulefile already exists: $OUTFILE. Skipping."
        return 0
    fi

    # Ensure the directory exists and has 755 permissions
    mkdir -p "$(dirname "$OUTFILE")" || {
        warn -p "Error: Failed to create directory for '$OUTFILE'"
        exit 1
    }
    chmod 755 "$(dirname "$OUTFILE")"

    # This command substitution captures the output of print_modulefile
    local MODULE; MODULE=$(print_modulefile "$URI")

    if echo "$MODULE" > "$OUTFILE";
    then
        # Set permissions to 644 (read-only for others).
        chmod 644 "$OUTFILE"
        echo "   Generated module: $OUTFILE"
    else
        warn -p "Error: Failed to write to '$OUTFILE'"
        exit 1
    fi
}

# Determines if a new modulefile should be generated or an old one repurposed.
# @param $1 - The container URI.
# @echo The content of the generated modulefile.
print_modulefile() {
    local uri="$1"
    local app; app=$(uri2app "$uri") || return 1
    local latest_modulefile; latest_modulefile=$(find_latest_modulefile "$app")

    if [[ -z "$latest_modulefile" ]];
    then
        echo "   No existing modulefile found for '$app'. Generating a new one." >&2
        generate_new_modulefile "$uri"
    else
        echo "   Found existing modulefile: $latest_modulefile. Repurposing it for new version." >&2
        repurpose_old_modulefile "$uri" "$latest_modulefile"
    fi
    return $?
}

# Finds the most recently modified modulefile for a given application.
# @param $1 - The application name.
# @echo The path to the latest modulefile, or empty string if none found.
find_latest_modulefile() {
    local app="$1"
    local latest_file=""
    local latest_time=0
    local MOD_EXISTING_DIRS

    if [[ $personal -eq 1 ]];
    then
        MOD_EXISTING_DIRS=("$HOME/privatemodules" "$MOD_EXISTING_DIR")
    else
        MOD_EXISTING_DIRS=("$MOD_EXISTING_DIR")
    fi

    for dir in "${MOD_EXISTING_DIRS[@]}";
    do
        # Skip if directory is empty or doesn't exist.
        if [[ -z "$dir" || ! -d "$dir/$app" ]];
        then
            continue
        fi
        # Loop through all .lua files and find the newest one.
        for f in "$dir/$app/"*.lua;
        do
            [[ -e "$f" ]] || continue
            current_time=$(stat -c %Y "$f")
            if (( current_time > latest_time ));
            then
                latest_time=$current_time
                latest_file="$f"
            fi
        done
    done
    echo "$latest_file"
}

# Generates a new modulefile from the base template.
# @param $1 - The container URI.
# @echo The content of the new modulefile.
generate_new_modulefile() {
    local uri="$1"
    local exec_outdir
    if [[ $personal -eq 1 ]];
    then
        exec_outdir="${PRIVATE_EXECUTABLE_DIR/#\$HOME/$HOME}"
    else
        exec_outdir="$PUBLIC_EXECUTABLE_DIR"
    fi

    local image; image=$(uri2imgname "$uri") || return 1
    local app; app=$(uri2app "$uri") || return 1
    local ver; ver=$(uri2ver "$uri") || return 1
    local homepage=""
    local description=""
    parse_home_description

    local registry=""
    local registry_url=""
    case "$uri" in
         *"biocontainers"*) registry="BioContainers"; registry_url="https://biocontainers.pro/tools/$app" ;;
        *) registry="DockerHub"; docker_repo=$(echo "$uri" | sed 's|docker://\([^:]*\):.*|\1|'); registry_url="https://hub.docker.com/r/${docker_repo}" ;;
    esac

    local template_file="${TEMPLATE_DIR}/module_template.lua"
    if [[ ! -f "$template_file" ]]; then
        warn -p "Error: Template file '$template_file' not found."
        return 1
    fi

    # Escape all variables before substituting them into the template
    local esc_desc; esc_desc=$(sedi_escape "$description")
    local esc_reg; esc_reg=$(sedi_escape "$registry")
    local esc_reg_url; esc_reg_url=$(sedi_escape "$registry_url")
    local esc_homepage; esc_homepage=$(sedi_escape "$homepage")
    local esc_image; esc_image=$(sedi_escape "$image")
    local esc_uri; esc_uri=$(sedi_escape "$uri")
    local esc_ver; esc_ver=$(sedi_escape "$ver")
    local esc_exec_dir; esc_exec_dir=$(sedi_escape "$exec_outdir")
    local esc_app; esc_app=$(sedi_escape "$app")

    # Substitute placeholders in the template using the escaped variables
    sed -e "s|\${DESCRIPTION}|$esc_desc|g" \
        -e "s|\${REGISTRY}|$esc_reg|g" \
        -e "s|\${REGISTRY_URL}|$esc_reg_url|g" \
        -e "s|\${HOMEPAGE}|$esc_homepage|g" \
        -e "s|\${IMAGE}|$esc_image|g" \
        -e "s|\${URI}|$esc_uri|g" \
        -e "s|\${VERSION}|$esc_ver|g" \
        -e "s|\${EXECUTABLE_DIR}|$esc_exec_dir|g" \
        -e "s|\${APP}|$esc_app|g" \
        "$template_file"
}

# Updates an existing modulefile for a new version of a container.
# @param $1 - The container URI of the new version.
# @param $2 - The file path to the old modulefile to use as a template.
# @echo The content of the updated modulefile.
repurpose_old_modulefile() {
    local uri="$1"
    local template="$2"
    local image; image=$(uri2imgname "$uri") || return 1
    local ver; ver=$(uri2ver "$uri") || return 1

    # Use awk to replace version, image, and URI strings in the old modulefile
    local buf; buf=$(awk -v ver="$ver" -v image="$image" -v uri="$uri" '
        /^[[:blank:]]*whatis.*Version:/ { $0 = "whatis(\"Version: " ver "\")" }
        /^[[:blank:]]*local[[:blank:]]+version[[:blank:]]*=/ { $0 = "local version = \"" ver "\"" }
        /^[[:blank:]]*local[[:blank:]]+image[[:blank:]]*=/ { $0 = "local image = \"" image "\"" }
        /^[[:blank:]]*local[[:blank:]]+uri[[:blank:]]*=/ { $0 = "local uri = \"" uri "\"" }
        /^[[:blank:]]*local[[:blank:]]+modroot[[:blank:]]*=/ { sub(/\.\. ".*"/, ".. \"" ver "\"") }
        { print }
    ' < "$template")

    if [[ $? -ne 0 || -z "$buf" ]]; then
        warn -p "Error: Failed to repurpose template '$template' for '$uri'"
        generate_new_modulefile "$uri"
        return $?
    fi
    echo "$buf"
}

# Generates executable wrapper scripts for programs inside a container.
# @param $1 - The container URI.
exec() {
    local uri="$1"
    local app; app=$(uri2app "$uri") || return 1
    local ver; ver=$(uri2ver "$uri") || return 1

    local image_dir_for_wrapper image_name_for_wrapper
    if [[ -f "$uri" ]];
    then
        local absolute_path; absolute_path="$(realpath "$uri")"
        image_dir_for_wrapper="$(dirname "$absolute_path")"
        image_name_for_wrapper="$(basename "$absolute_path")"
    else
        if [[ $personal -eq 1 ]];
        then
            image_dir_for_wrapper="$PRIVATE_IMAGEDIR"
        else
            image_dir_for_wrapper="$PUBLIC_IMAGEDIR"
        fi
        image_name_for_wrapper=$(uri2imgname "$uri") || return 1
    fi

    local exec_array; exec_array=($(parse_exec))
    if [ $? -ne 0 ]; then
        warn -p "No executables are defined for '$app'. Skipping exec generation."
        return 0
    fi

    local exec_outdir
    if [[ $personal -eq 1 ]];
    then
        exec_outdir="$PRIVATE_EXECUTABLE_DIR"
    else
        exec_outdir="$EXEC_OUTDIR"
    fi

    local AppTool_dir="${exec_outdir}/${app}/${ver}/bin"
    if [[ -d "$AppTool_dir" && $force -eq 0 ]];
    then
        warn -p "Output directory $AppTool_dir already exists. Skipping."
        return 0
    fi

    if [[ -d "$AppTool_dir" && $force -eq 1 ]];
    then
        echo "   Force option enabled, removing existing directory $AppTool_dir"
        rm -rf "$AppTool_dir" || { warn -p "Failed to remove dir $AppTool_dir"; exit 1; }
    fi
    mkdir -p "$AppTool_dir" || { warn -p "Failed to create dir $AppTool_dir"; exit 1; }

    echo "   Generating executables for $app version $ver..."
    for command_exec in "${exec_array[@]}";
    do
        if confirm_exec_exists "$command_exec" "${image_dir_for_wrapper}/${image_name_for_wrapper}";
        then
            if generate_executable "$app" "$ver" "$command_exec" "$image_dir_for_wrapper" "$image_name_for_wrapper" "$AppTool_dir";
            then
                echo "     -> Successfully generated: $command_exec"
            else
                warn -p "     -> Error: Failed to generate executable: $command_exec"
            fi
        else
            warn -p "     -> Warning: Executable not found in container: $command_exec"
        fi
    done

    # Ensure all directories within the app's exec folder are 755
    find "${exec_outdir}/${app}" -type d -exec chmod 755 {} +
    
    echo "   Executables generated in: ${exec_outdir}/${app}/${ver}"
}

# Checks if a given command exists inside the container.
# @param $1 - The command name to check.
# @param $2 - The full path to the container image file.
# @return 0 if it exists, 1 otherwise.
confirm_exec_exists() {
    local exec_cmd="$1"
    local image_path="$2"
    if ! singularity exec "$image_path" bash -c "command -v \"$exec_cmd\"" &> /dev/null; then
        return 1
    else
        return 0
    fi
}

# Creates a single executable wrapper script.
# @param ... - app, version, command, image_dir, image_name, AppTool_dir
# @return 0 on success, 1 on failure.
generate_executable() {
    local app=$1 version=$2 command=$3 image_dir=$4 image_name=$5 AppTool_dir=$6
    local executable="${AppTool_dir}/${command}"

    if [[ -z "$app" || -z "$version" || -z "$command" || -z "$image_dir" || -z "$image_name" || -z "$AppTool_dir" ]];
    then
        warn -p "Error: Missing arguments for generate_executable"
        return 1
    fi

    mkdir -p "$(dirname "$executable")"

    # Create the wrapper script with a heredoc
    cat <<EOF >"$executable"
#!/usr/bin/env bash
# Wrapper script for '$command' from container '$image_name'

# Set variables
VER="$version"
PKG="$app"
PROGRAM="$command"
IMAGE_DIR="$image_dir"
IMAGE="$image_name"

# Load Singularity or Apptainer if not already available
if ! command -v singularity &> /dev/null && ! command -v apptainer &> /dev/null; then
    module load singularity &> /dev/null || module load apptainer &> /dev/null || { echo "Failed to load Singularity or Apptainer module"; exit 1; }
fi

# Determine GPU flags for Singularity
OPTIONS=""
if nvidia-smi -L &> /dev/null;
then
    OPTIONS="--nv"
fi
if rocm-smi -L &> /dev/null; then
    OPTIONS="\$OPTIONS --rocm"
fi

# Run the container command
singularity exec \$OPTIONS "\$IMAGE_DIR/\$IMAGE" "\$PROGRAM" "\$@"
EOF

    # Set permissions to 755 (executable for all).
    chmod 755 "$executable"
    if [[ $? -ne 0 ]]; then
        warn -p "Error: Failed to set permissions for wrapper $command"
        return 1
    fi
}

###############################################################################
#  APP INFO AND EXECUTABLE PARSING FROM REPO FILES
###############################################################################

# Creates a new application info file based on user input.
# @param $1 - The application name.
# @param $2 - The full path to the new app info file.
create_appinfo_file() {
    local app=$1
    local localappinfo=$2
    echo "'$app' not found in application info database."
    echo "Let's create a new entry..."
    read -p "Enter a simple description of the application: " description
    read -p "Enter the application's homepage URL: " homepage
    read -p "Enter the available programs (comma-separated): " programs
    mkdir -p "$(dirname "$localappinfo")"
    {
        echo "Description: $description"
        echo "Home Page: $homepage"
        echo "Programs: $programs"
    } > "$localappinfo"
}

# Parses the 'Description' and 'Home Page' from an app info file.
parse_home_description() {
    local app_file
    # Search for the app info file in both personal and system repos
    APP_INFO_PATH=("$HOME/container-apps/repos" "$AppInfo_DIR")
    for path in "${APP_INFO_PATH[@]}";
    do
        if [[ -f "$path/$app" ]];
        then
            app_file="$path/$app"
            break
        fi
    done

    if [[ -f "$app_file" ]];
    then
        description=$(grep -m1 "^Description:" "$app_file" | sed 's/^Description: //')
        homepage=$(grep -m1 "^Home Page:" "$app_file" | sed 's/^Home Page: //')
    fi
}

# Parses the 'Programs' list from an app info file.
# @echo A space-separated list of executable names.
parse_exec() {
    local app_file
    # Search for the app info file in both personal and system repos
    APP_INFO_PATH=("$HOME/container-apps/repos" "$AppInfo_DIR")
    for path in "${APP_INFO_PATH[@]}";
    do
        if [[ -f "$path/$app" ]];
        then
            app_file="$path/$app"
            break
        fi
    done

    if [[ ! -f "$app_file" ]]; then
        warn -p "Error: Application file '$app_file' not found."
        return 1
    fi

    local executables
    executables=$(grep -m1 "^Programs:" "$app_file" | sed 's/^Programs: //')
    if [[ -z "$executables" ]];
    then
        return 1
    fi

    # Convert comma-separated string to an array and echo its elements
    IFS=',' read -r -a arr <<< "$executables"
    echo "${arr[@]}"
}

###############################################################################
#  JUPYTER KERNEL CREATION
###############################################################################

# Generates a Jupyter kernel for the container.
# @param $1 - The container URI.
jupyter() {
    local uri=$1
    local app; app=$(uri2app "$uri") || return 1
    local ver; ver=$(uri2ver "$uri") || return 1
    local image; image=$(uri2imgname "$uri") || return 1
    local kernel_name="${app}-${ver}"
    local kernel_dir

    if [[ $personal -eq 1 ]];
    then
        kernel_dir="$HOME/.local/share/jupyter/kernels/$kernel_name"
    else
        kernel_dir="${JUPYTER_OUTDIR}/${kernel_name}"
    fi

    local image_outdir
    if [[ $personal -eq 1 ]];
    then
        image_outdir="$PRIVATE_IMAGEDIR"
    else
        image_outdir="$PUBLIC_IMAGEDIR"
    fi

    # Check for ipykernel dependency inside the container
    if ! singularity exec "${image_outdir}/${image}" python -c "import ipykernel" &> /dev/null; then
        MSG=( "The dependency 'ipykernel' was not detected in ${image}." "" "Please add it to your container definition:" "" "   pip install ipython ipykernel" )
        boxify_text "${MSG[@]}"
        exit 1
    fi

    # Create kernel directory and kernel.json file
    if [[ ! -d "$kernel_dir" ]]; then
        mkdir -p "$kernel_dir"
        cp "$SCRIPT_TOP_DIR/jupyter_kernel.json" "${kernel_dir}/kernel.json"

        local exec_outdir
        if [[ $personal -eq 1 ]];
        then
            exec_outdir="${PRIVATE_EXECUTABLE_DIR/#\$HOME/$HOME}"
        else
            exec_outdir="$PUBLIC_EXECUTABLE_DIR"
        fi

        local AppTool_dir="${exec_outdir}/${app}/${ver}/bin"
        local esc_apptool_dir; esc_apptool_dir=$(sedi_escape "$AppTool_dir")
        local esc_app; esc_app=$(sedi_escape "$app")
        local esc_ver; esc_ver=$(sedi_escape "$ver")

        sed -i -e "s|APPDIR|$esc_apptool_dir|g" \
               -e "s|APP|$esc_app|g" \
               -e "s|VERSION|$esc_ver|g" \
               "${kernel_dir}/kernel.json"
    else
        echo "   Kernel already exists: $kernel_dir. Skipping."
    fi
    echo "   Jupyter kernel created: $kernel_name"
    MSG=( "You can now launch Jupyter and select the kernel:" "" "   $app $ver" )
    boxify_text "${MSG[@]}"
}

###############################################################################
#  MAIN SCRIPT LOGIC
###############################################################################

# --- Default Configuration Options ---
force=0
personal=0
jupyter=0
SCRIPT_TOP_DIR="$(realpath "${BASH_SOURCE[0]}" | xargs dirname)"
TEMPLATE_DIR="$SCRIPT_TOP_DIR/templates"
AppInfo_DIR="${SCRIPT_TOP_DIR}/repos"
PROFILEROOT="${SCRIPT_TOP_DIR}/profiles"
OUTDIR_DEF="."
OUTDIR="${OUTDIR:-$OUTDIR_DEF}"
MOD_OUTDIR="${OUTDIR}/incomplete"
EXEC_OUTDIR="${OUTDIR}/executables"
JUPYTER_OUTDIR="${OUTDIR}/kernels"
PRIVATE_EXECUTABLE_DIR="$HOME/container-apps/tools"
PRIVATE_MODULEDIR="$HOME/privatemodules"
PRIVATE_IMAGEDIR="$HOME/container-apps/images"
PROFILEHOMEDIR="$HOME/container-apps/profiles"

# --- Argument and Subcommand Parsing ---
SUBCOMMAND="$1"
if [[ -z "$SUBCOMMAND" || "$SUBCOMMAND" == "-h" || "$SUBCOMMAND" == "--help" ]];
then
    help_message
    exit 0
fi
if [[ "$SUBCOMMAND" == "-l" || "$SUBCOMMAND" == "--list" ]];
then
    list_profiles
    exit 0
fi
shift # Move past the subcommand

declare -a ARGV
while [[ -n "$1" ]];
do
    case $1 in
        --profile) shift; PROFILE="$1" ;;
        -d|--dir|--directory) shift; OUTDIR="$1" ;;
        -f|--force) force=1 ;;
        -m|--module-dir|--module-directory) shift; MOD_EXISTING_DIR="$1" ;;
        -u|--update) update_repo=1 ;;
        -p|--personal) personal=1 ;;
        -j|--jupyter) jupyter=1 ;;
        --) shift; break ;;
        -*) warn -p "Unknown option: $1"; help_message; exit 1 ;;
        *) ARGV+=("$1") ;;
    esac
    shift
done
set -- "${ARGV[@]}" # Set positional parameters to remaining arguments

# --- Profile Loading ---
if [[ -n "$PROFILE" ]];
then
    if [[ -f "${PROFILEHOMEDIR}/$PROFILE" ]]; then
        echo "Loading personal profile: $PROFILE"
        source "${PROFILEHOMEDIR}/$PROFILE"
    elif [[ -f "${PROFILEROOT}/$PROFILE" ]];
    then
        echo "Loading system profile: $PROFILE"
        source "${PROFILEROOT}/$PROFILE"
    else
        warn -p "Error: Profile '$PROFILE' not found."
        exit 1
    fi
else
    echo "No profile specified. Running in personal mode."
    personal=1
fi

# Set default if not defined in profile
MOD_EXISTING_DIR="${MOD_EXISTING_DIR:-$MOD_EXISTING_DIR_DEF}"

# --- Initialization ---
echo "Initializing..."
ensure_appinfo_dir
for URI in "$@"; do
    _ensure_uri_details_cached "$URI" || { warn -p "Could not get app details for $URI"; exit 1; }
    ensure_appinfo_file "$URI"
done

# Create output directories
if [[ $personal -eq 1 ]];
then
    create_dir "$PRIVATE_EXECUTABLE_DIR" "Created personal executable directory"
    create_dir "$PRIVATE_MODULEDIR" "Created personal module directory"
    create_dir "$PRIVATE_IMAGEDIR" "Created personal image directory"
else
    create_dir "$EXEC_OUTDIR" "Created public executable directory"
    create_dir "$MOD_OUTDIR" "Created public module directory"
    if [[ -n "$PUBLIC_IMAGEDIR" ]]; then create_dir "$PUBLIC_IMAGEDIR" "Created public image directory"; fi
fi

# --- Main Subcommand Execution ---
case "$SUBCOMMAND" in
    pull)   handle_subcommand pull "$@" ;;
    module) handle_subcommand module "$@" ;;
    exec)   handle_subcommand exec "$@" ;;
    pipe)
        handle_subcommand pull "$@"
        handle_subcommand module "$@"
        handle_subcommand exec "$@"
        ;;
    *)
        warn -p "Invalid subcommand: $SUBCOMMAND"
        help_message >&2
        exit 1 ;;
esac

# --- Final User Messages ---
if [[ "$SUBCOMMAND" == "module" || "$SUBCOMMAND" == "pipe" ]];
then
    for URI in "$@"; do
        app=$(uri2app "$URI") || continue
        ver=$(uri2ver "$URI") || continue
        modname=$(uri2modname "$URI") || continue
        if [[ $personal -eq 1 ]];
        then
            MSG=( "To use this module, load:" "" "    module load use.own" "    module load $app/$ver" )
        else
            MSG=( "To use this module, load:" "" "    module use $MOD_OUTDIR" "    module load $app/$ver" )
        fi
        boxify_text "${MSG[@]}"
    done
fi

if [[ $jupyter -eq 1 ]]; then
    for URI in "$@";
    do
        echo "Generating Jupyter kernel for $URI"
        if ! jupyter "$URI"; then
            warn -p "Error creating Jupyter kernel for $URI"
        fi
    done
fi

echo -e "\e[1mScript finished successfully.\e[0m"